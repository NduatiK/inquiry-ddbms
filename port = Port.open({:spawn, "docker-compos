port = Port.open({:spawn, "docker-compose up" }, [:binary])



port = Port.open({:spawn, "docker run --rm -i keinos/sqlite3 sqlite3" }, [:binary])
send(port, {self(), {:command, "create table table_sample(timestamp text, description text);" }})
send(port, {self(), {:command, "insert into table_sample values(datetime(\"now\"),\"First sample data. Hoo\");" }})
send(port, {self(), {:command, "select * from table_sample;" }})

send(port, {self(), {:command, "1 + 1" }})


alias Porcelain.Process, as: Proc
alias Porcelain.Result

proc = %Proc{pid: pid} =
  Porcelain.spawn_shell("grep ohai -m 2 --line-buffered",
                                in: :receive, out: {:send, self()})

Proc.send_input(proc, "ohai proc\n")
receive do
  {^pid, :data, :out, data} -> IO.inspect data   #=> "ohai proc\n"
end

Proc.send_input(proc, "this won't match\n")
Proc.send_input(proc, "ohai")
Proc.send_input(proc, "\n")
receive do
  {^pid, :data, :out, data} -> IO.inspect data   #=> "ohai\n"
end
receive do
  {^pid, :result, %Result{status: status}} -> IO.inspect status   #=> 0
end

alias Porcelain.Process, as: Proc
alias Porcelain.Result


proc = %Proc{pid: pid} =
  Porcelain.spawn_shell("docker run --rm -it keinos/sqlite3",
                                in: :receive, out: {:send, self()})
Proc.send_input(proc, "create table table_sample(timestamp text, description text);")
 
Proc.send_input(proc, " insert into table_sample values(datetime(\"now\"),\"First sample data. Hoo\");" )
Proc.send_input(proc, " select * from table_sample;")


import Exexec
{:ok, port, _} = run_link("docker run --rm -i keinos/sqlite3", stdin: true, stdout: true)
{:ok, port, _} = run_link("echo", stdin: true, stdout: true)

Exexec.send(port, "create table table_sample(timestamp text, description text);\n")



alias Porcelain.Process, as: Proc
alias Porcelain.Result

cmd = """
docker exec -i ddbms_server_postgres_1 psql -U postgres  --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker'"
"""
cmd |> String.to_charlist |> :os.cmd

Rambo.run("docker", [cmd])

proc = %Proc{pid: pid} =
  Porcelain.spawn_shell(cmd,
                                in: :receive, out: {:send, self()})


%Result{out: output, status: status} = Porcelain.shell(cmd)


docker exec -i ddbms_server_postgres_1 psql -U postgres  --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker'"
docker exec -it my_db_1 psql -U postgres -d project -c "SELECT * FROM block WHERE id=1"
